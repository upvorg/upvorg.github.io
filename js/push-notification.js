var r=(t,e,n)=>new Promise((s,o)=>{var i=a=>{try{l(n.next(a))}catch(u){o(u)}},f=a=>{try{l(n.throw(a))}catch(u){o(u)}},l=a=>a.done?s(a.value):Promise.resolve(a.value).then(i,f);l((n=n.apply(t,e)).next())});let g=new Date().valueOf();const d=new Set,c={};function m(t){try{return t.data.json()}catch(e){console.log("[SW] Unable to parse push notification data",t.data);return}}function y(t){if(t.custom.from_id)return t.custom.from_id;if(t.custom.chat_id||t.custom.channel_id)return`-${t.custom.chat_id||t.custom.channel_id}`}function N(t){if(!!t.custom.msg_id)return parseInt(t.custom.msg_id,10)}function S(t){return{chatId:y(t),messageId:N(t),title:t.title,body:t.description}}function p(){return r(this,null,function*(){const t=new URL(self.registration.scope).origin;return(yield self.clients.matchAll({type:"window"})).filter(n=>new URL(n.url).origin===t)})}function U(t){return r(this,null,function*(){const n=(yield p())[0];!n||n.postMessage({type:"playNotificationSound",payload:{id:t}})})}function w({chatId:t,messageId:e,body:n,title:s,icon:o}){const i=new Date().valueOf()-g<1e3,f=String(i?0:t||0),l={body:n,data:{chatId:t,messageId:e,count:1},icon:o||"icon-192x192.png",badge:"icon-192x192.png",tag:f,vibrate:[200,100,200]};return Promise.all([U(String(e)||t||""),self.registration.showNotification(s,l)])}function I(n){return r(this,arguments,function*({chatId:t,lastReadInboxMessageId:e}){const s=yield self.registration.getNotifications(),o=e||Number.MAX_VALUE;s.forEach(i=>{(i.tag==="0"||i.data.chatId===t&&i.data.messageId<=o)&&i.close()})})}export function handlePush(t){console.log("[SW] Push received event",t),t.data&&console.log("[SW] Push received with data",t.data.json());const e=m(t);if(!e||e.mute===1)return;const n=S(e);if(d.has(n.messageId)){d.delete(n.messageId);return}t.waitUntil(w(n))}function h(t,e){return r(this,null,function*(){const{chatId:n,messageId:s}=e;if(!!n&&(t.postMessage({type:"focusMessage",payload:{chatId:n,messageId:s}}),!t.focused))try{yield t.focus()}catch(o){console.warn("[SW] ",o)}})}export function handleNotificationClick(t){const e=self.registration.scope;t.notification.close();const{data:n}=t.notification,s=()=>r(this,null,function*(){const o=yield p();if(yield Promise.all(o.map(i=>(c[i.id]=n,h(i,n)))),!(!self.clients.openWindow||o.length>0)){c[0]=n;try{const i=yield self.clients.openWindow(e);i&&(c[i.id]=n)}catch(i){console.warn("[SW] ",i)}}});t.waitUntil(s())}export function handleClientMessage(t){if(console.log("[SW] New message from client",t),!t.data)return;const e=t.source;if(t.data.type==="clientReady"){const n=c[e.id]||c[0];n&&(delete c[e.id],delete c[0],t.waitUntil(h(e,n)))}if(t.data.type==="newMessageNotification"){const n=t.data.payload;d.add(n.messageId),t.waitUntil(w(n))}t.data.type==="closeMessageNotifications"&&t.waitUntil(I(t.data.payload))}self.onsync=()=>{g=new Date().valueOf()};
